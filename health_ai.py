# -*- coding: utf-8 -*-
"""Health AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wDx9tTEHrpQf50dxnUO3VyvOj2YhNGWq
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import datetime

# --------------------------
# Load Model
# --------------------------
# This part of the code loads the AI model for generating responses.
# It uses a pre-trained model from IBM for causal language modeling.
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# --------------------------
# AI Response Functions
# --------------------------
def generate_response(prompt, max_length=1024):
    """Generates a text response from the loaded model based on the given prompt."""
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms, history):
    """
    Predicts possible medical conditions and adds the query to the history.
    """
    prompt = f"""Based on the following symptoms, provide possible medical conditions
    and general medication suggestions. Always emphasize the importance of consulting a doctor.

    Symptoms: {symptoms}

    IMPORTANT: This is for informational purposes only. Please consult a healthcare professional.

    Analysis:"""

    response = generate_response(prompt, max_length=1200)

    # Update history with the new query and response
    new_entry = {
        "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "type": "Disease Prediction",
        "query": f"Symptoms: {symptoms}",
        "response": response
    }
    history.append(new_entry)

    return response, history

def treatment_plan(condition, age, gender, medical_history, history):
    """
    Generates a personalized treatment plan and adds the query to the history.
    """
    prompt = f"""Generate personalized treatment suggestions for the following patient:

    Medical Condition: {condition}
    Age: {age}
    Gender: {gender}
    Medical History: {medical_history}

    IMPORTANT: This is for informational purposes only. Please consult a healthcare professional.

    Treatment Plan:"""

    response = generate_response(prompt, max_length=1200)

    # Update history with the new query and response
    new_entry = {
        "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "type": "Treatment Plan",
        "query": f"Condition: {condition}, Age: {age}, Gender: {gender}, History: {medical_history}",
        "response": response
    }
    history.append(new_entry)

    return response, history

# --------------------------
# User Authentication System
# --------------------------
users = {
    "admin": "1234" # your account by default
}

def login(username, password):
    """Authenticates a user and shows the main app if credentials are correct."""
    if username in users and users[username] == password:
        return gr.update(visible=False), gr.update(visible=False), gr.update(visible=True), f"‚úÖ Welcome, {username}!"
    else:
        return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False), "‚ùå Invalid credentials. Try again."

def signup(new_username, new_password, confirm_password):
    """Handles new user registration."""
    if new_username in users:
        return "‚ö† Username already exists. Try another."
    if new_password != confirm_password:
        return "‚ö† Passwords do not match. Try again."
    if len(new_username.strip()) == 0 or len(new_password.strip()) == 0:
        return "‚ö† Username/Password cannot be empty."

    users[new_username] = new_password
    return f"‚úÖ Account created for *{new_username}*! You can now log in."

def clear_history(history):
    """Clears the in-memory chat history."""
    return [], "" # Return an empty list for history and an empty string for the display

def format_history_display(history):
    """Formats the history list into a readable markdown string."""
    if not history:
        return "No history available."

    history_string = ""
    for entry in history:
        history_string += f"*Timestamp:* {entry['timestamp']}\n"
        history_string += f"*Type:* {entry['type']}\n"
        history_string += f"*Query:* {entry['query']}\n"
        history_string += f"*Response:* {entry['response']}\n"
        history_string += "---\n"

    return history_string

# --------------------------
# Build Gradio Interface
# --------------------------
with gr.Blocks(title="Medical AI Assistant") as app:
    gr.Markdown("## üîê Medical AI Assistant with Login & Signup")

    # State to hold the chat history
    history_state = gr.State([])

    # Login Section
    with gr.Group(visible=True) as login_group:
        gr.Markdown("### Please Login")
        username_input = gr.Textbox(label="Username")
        password_input = gr.Textbox(label="Password", type="password")
        login_btn = gr.Button("Login")
        login_status = gr.Markdown("")
        signup_link = gr.Button("New user? Sign up here")

    # Signup Section
    with gr.Group(visible=False) as signup_group:
        gr.Markdown("### Create a New Account")
        new_username = gr.Textbox(label="New Username")
        new_password = gr.Textbox(label="New Password", type="password")
        confirm_password = gr.Textbox(label="Confirm Password", type="password")
        signup_btn = gr.Button("Sign Up")
        signup_status = gr.Markdown("")
        back_to_login = gr.Button("‚¨Ö Back to Login")

    # Main App Section (hidden until login)
    with gr.Group(visible=False) as main_app:
        gr.Markdown("# ü©∫ Medical AI Assistant")
        gr.Markdown("Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.")

        with gr.Tabs():
            # Home Page
            with gr.TabItem("Home"):
                gr.Markdown(
                    """
                    ### Welcome to the Medical AI Assistant!

                    This application provides you with informational content about potential medical conditions and treatment plans. It is designed to be a starting point for gathering information, not a substitute for professional medical advice.

                    ---

                    ### How to Use This Tool

                    * *Disease Prediction:* Navigate to the "Disease Prediction" tab and enter a list of symptoms you are experiencing. The AI will provide a list of possible conditions and general recommendations.
                    * *Treatment Plans:* In the "Treatment Plans" tab, you can input a medical condition along with personal details like age, gender, and medical history. The AI will generate a personalized treatment plan for informational purposes.
                    * *History:* The "History" tab keeps a record of all your queries and the AI's responses, allowing you to review past interactions.

                    ---

                    ### Important Disclaimer

                    The information and suggestions provided by this AI assistant are based on a large language model and should be considered for *informational purposes only. They are not intended to be a substitute for a professional medical diagnosis or treatment. **Always consult a qualified healthcare provider for medical advice.*
                    """
                )

            # Disease Prediction Tab
            with gr.TabItem("Disease Prediction"):
                with gr.Row():
                    with gr.Column():
                        symptoms_input = gr.Textbox(
                            label="Enter Symptoms",
                            placeholder="e.g., fever, headache, cough, fatigue...",
                            lines=4
                        )
                        predict_btn = gr.Button("Analyze Symptoms")
                    with gr.Column():
                        prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

                predict_btn.click(
                    disease_prediction,
                    inputs=[symptoms_input, history_state],
                    outputs=[prediction_output, history_state]
                ).then(
                    format_history_display,
                    inputs=history_state,
                    outputs=gr.Textbox(label="History Display", lines=10) # Dummy output for history tab refresh
                )

            # Treatment Plans Tab
            with gr.TabItem("Treatment Plans"):
                with gr.Row():
                    with gr.Column():
                        condition_input = gr.Textbox(label="Medical Condition", placeholder="e.g., diabetes, hypertension, migraine...", lines=2)
                        age_input = gr.Number(label="Age", value=30)
                        gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
                        history_input = gr.Textbox(label="Medical History", placeholder="Previous conditions, allergies, medications or None", lines=3)
                        plan_btn = gr.Button("Generate Treatment Plan")
                    with gr.Column():
                        plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

                plan_btn.click(
                    treatment_plan,
                    inputs=[condition_input, age_input, gender_input, history_input, history_state],
                    outputs=[plan_output, history_state]
                ).then(
                    format_history_display,
                    inputs=history_state,
                    outputs=gr.Textbox(label="History Display", lines=10) # Dummy output for history tab refresh
                )

            # History Tab
            with gr.TabItem("History"):
                with gr.Column():
                    gr.Markdown("### Your Query History")
                    history_display = gr.Textbox(label="Past Queries and Responses", lines=20, interactive=False)
                    clear_history_btn = gr.Button("Clear History")

                # Initial display of history when the page loads
                app.load(format_history_display, inputs=history_state, outputs=history_display)

                clear_history_btn.click(
                    clear_history,
                    inputs=history_state,
                    outputs=[history_state, history_display]
                )

            # About Tab
            with gr.TabItem("About"):
                gr.Markdown(
                    """
                    ### About This Application

                    This AI-powered medical assistant is designed to provide you with general, informational content about possible medical conditions and treatment options.

                    ### Technology Stack

                    This application is built using several powerful open-source libraries:

                    * *Gradio:* The entire user interface is built with Gradio, which allows us to create interactive web applications from Python scripts with minimal effort. This is what you see and interact with in your browser.
                    * *Hugging Face Transformers:* This library provides access to the pre-trained ibm-granite/granite-3.2-2b-instruct model, which is the core intelligence behind the assistant. The library handles the complex tasks of loading the model and tokenizer, and generating text.
                    * *PyTorch:* The underlying deep learning framework that powers the model, handling all the computational heavy lifting for text generation.

                    ### Purpose and Limitations

                    The primary purpose of this tool is to demonstrate the potential of large language models in a real-world application. It can be a helpful starting point for general information and a way to organize your thoughts before consulting a professional.

                    *Crucial Caveat:* The information provided by this assistant is not a substitute for professional medical advice, diagnosis, or treatment. It is a generative model and its responses are based on patterns in its training data, not on the complex, nuanced understanding of a medical professional. Always consult a qualified healthcare provider for any health-related concerns.
                    """
                )

    # Connect Login
    login_btn.click(
        login,
        inputs=[username_input, password_input],
        outputs=[login_group, signup_group, main_app, login_status]
    )

    # Connect Signup
    signup_btn.click(
        signup,
        inputs=[new_username, new_password, confirm_password],
        outputs=[signup_status]
    )

    # Toggle between Login & Signup
    signup_link.click(
        lambda: (gr.update(visible=False), gr.update(visible=True)),
        inputs=[],
        outputs=[login_group, signup_group]
    )
    back_to_login.click(
        lambda: (gr.update(visible=True), gr.update(visible=False)),
        inputs=[],
        outputs=[login_group, signup_group]
    )

app.launch()